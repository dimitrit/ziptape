
		.ORG $4000
;
; ***** FAST CASSETTE INTERFACE ***** 
;        (CONFIGURED FOR KIM)
;
; =================================================================
;  modified for CSC 6502 Cross Assembler Glen Deas K5GED 1/11/2023
;  updated for vasm6502_oldstyle assembler D THEULINGS   1/25/2023
; =================================================================
;
; To use this software, enter data in memory locations 0123-0127 
; as follows:	0123 = LOADNO
; 		0124-0125 = START ADDRESS
; 		0126-0127 = END ADDRESS
; The record routine will record from START ADDRESS to END ADDRESS. 
; LOAD/NO has no meaning to the record software.
; 
; The load routine will load from START ADDRESS to END ADDRESS but
; store data in memory only if LOADNO does not equal 0. When equal 
; 0, LOADNO can be used for verifying and conditionally selecting 
; modules on tape.
; 
; The load and record routines have callable entry points at CWRITE 
; (4000) and CREAD (40A5), and non-callable entry points at 
; LOADENTRY (4141) and RECORDENT (4152). If CREAD is called, the
; Z-bit in the PSR will be true on return if no error was detected
; and false if errors occurred. If execution is at the non-callable
; entry LOADENTRY, a break (via BRK instruction) will be execcuted 
; at end of loading and register A will indicate if the data was
; loaded correctly: R(A)=00 for good load, and EE for errors.
; 
;
; == INPUT/OUTPUT ==
CPORT		= $1702		; CASSETTE I/O
CPORTD		= $1703		; PORT DIRECTION REGISTER
; BIT 3 = WRITE TO CASSETTE; BIT 2 = READ FROM CASSETTE
;
;
; == VARIABLES ==
CHECKSUM	= $B2		; TWO BYTE CHECKSUM 
ADDRS		= $B6 
COUNT		= ADDRS 
FORMBYTE	= $B4 
SYNCCOUNT	= FORMBYTE
BITCOUNT	= $B5
;
; INPUT PARMS
LOADNO		= $0123 	; 00=NC LOAD; 01=LOAD
TSTART		= $0124		; START ADDRESS
TEND		= $0126		; END ADDRESS +1
;
;
; CWRITE: WRITE TO TAPE FROM (START) TO (END)
;
CWRITE		LDA CPORTD
		ORA #%00001000	; BIT 3 FOR OUTPUT ON PIA 
		STA CPORTD
; THE ABOVE INITIALIZES BIT 3 FOR OUTPUT ON PIA
;
		LDA #$20	; 32 TIMES 
		STA COUNT
LPRECST		LDA #$16	; SYNC CHAR.
		JSR WRITEBYTE
;
		LDA #$10
		STA SYNCCOUNT
LPDELA		JSR OUTZERO
		DEC SYNCCOUNT
		BNE LPDELA
; DELAY TIME FOR SYNC
;
		DEC COUNT 
		BNE LPRECST
;
		JSR MOVESTAD	; START < ADDRS (2)
;
		LDA #$0F	; RECORD START CHAR. 
		JSR WRITEBYTE
;
		LDX #$00
		STX CHECKSUM	; CLEAR CHECKSUM LOW BYTE 
		STX CHECKSUM+1	; AND HIGH BYTE
;
;
LOOPDATA	LDA (ADDRS,X)	; LOAD DATA INDEXED BY X REG 
		JSR WRITEBYTE
		JSR INCCOMP
		BCC LOOPDATA
;
;
		LDA CHECKSUM+1
		PHA		; SAVE HI CKSUM
		LDA CHECKSUM
		JSR WRITEBYTE	; WRITE LO CKSUM FIRST 
		PLA 		; HI CKSUM NEXT
;THE ABOVE WRITES BOTH CHECKSUM BYTES
;
;
;ROUTINE TO WRITE A BYTE TO TAPE
;
WRITEBYTE	STA FORMBYTE
		JSR CKSUMADD	; UPDATE CHECKSUM COUNTER
		JSR OUTONE	; START BIT 
		LDA #$08	; 8 BITS
		STA BITCOUNT
DATALOOP	ASL FORMBYTE	; SHIFT LEFT INTO CARRY 
		BCC ZEROBIT
ONEBIT		JSR OUTONE
		BEQ CKENDBY
ZEROBIT		JSR OUTZERO
CKENDBY		DEC BITCOUNT
		BNE DATALOOP 
;NOT OUTPUT 1 STOP BIT
;
;ROUTINE OUTPUT A ZERO TO TAPE
;
OUTZERO		LDA #$20	; '0' DELAY CONSTANT 
;
;
;:ROUTINE WRITE TO TAPE
;
WRITE		PHA		; SAVE DELAY CONSTANT
		LDA CPORT
		ORA #%00001000	; OUT A '1' ON BIT 3
		STA CPORT 
		PLA 
		PHA 
		TAX		; DELAY CONSTANT
		JSR LOOPD 
		LDA CPORT
		AND #%11110111	; OUT A '0' ON BIT 3 
		STA CPORT
		PLA
		TAX		; DELAY CONSTANT
LOOPD		DEX
		BNE LOOPD
		RTS
;
;
; ROUTINE OUTPUT A ONE TO TAPE
;
OUTONE		LDA #$50	; '1' DELAY CONSTANT
		BNE WRITE
;
;
; DELAY FOR '0' TIME FOR READ 
;
READDELAY	LDX #$30
		BNE LOOPD
;
;
;
; ROUTINE MOVE FROM START TO ADDRS
;
MOVESTAD	LDA TSTART
		STA ADDRS
		LDA TSTART+1
		STA ADDRS+1 
		RTS
;
;
;
; ROUTINE INCREMENT AND COMPARE
;
INCCOMP		INC ADDRS
		BNE SKIPINC 
		INC ADDRS+1
SKIPINC		LDA ADDRS+1
		CMP TEND+1
		BCC NOTEND 
		LDA ADDRS 
		CMP TEND
		BCC NOTEND 
		SEC
NOTEND		RTS
;ON RETURN, C=CLEAR: NOTEND: C=SET: END REACHED
;
;
; CREAD: READ FROM TAPE TO (START) TO (END)
;
CREAD		LDX #$00
		STX COUNT
LOOPLOAD	JSR READBYTE
		CMP #$16	; SYNC
		BNE SKIP1 
		INC COUNT
		BNE LOOPLOAD
;
SKIP1		LDY COUNT
		CPY #$0A	; MUST BE >= 10 SYNC'S 
		BCC CREAD
		CMP  #$0F	; RECORD START
		BNE  CREAD
;
		LDY #$00
		STY CHECKSUM
		STY CHECKSUM+1	; LAR CHECKSUM LOCATIONS
		JSR MOVESTAD	; START > ADDRS (2)
;
; NOW LOAD DATA
LOOP69		JSR READBYTE
		LDY LOADNO	; CKG. IF TO STORE
		BEQ SKIPSTOR
		STA (ADDRS,X)
SKIPSTOR	JSR INCCOMP
		BCC LOOP69
		LDA CHECKSUM+1
		PHA		; SAVE CHKSUM HI
		LDA CHECKSUM
		PHA		; SAVE CHKSUM LO
		JSR READBYTE
		PLA
		CMP FORMBYTE	; CHECK CHECKSUM LO
		BNE RETURN
		JSR READBYTE
		PLA
		CMP FORMBYTE	; CHECK CHECKSUM HI
		RTS
RETURN 		PLA
		LDA #$FF	; CLEAR Z-BIT
		RTS
; ON RETURN Z-BIT = TRUE:GOOD LOAD: Z-BIT==FALSE:ERROR
;
; ROUTINE READ A BYTE FROM TAPE
;
READBYTE	JSR INPORT
		BNE READBYTE	; LOOP UNTIL 0
;
WAITFOR1	JSR INPORT
		BEQ WAITFOR1	; LOOP UNTIL 1
;
		JSR READDELAY
		JSR INPORT
		BEQ WAITFOR1	; IF ZERO
;
WAITFOR0 	JSR INPORT
		BNE WAITFOR0	; WAIT TIL END OF START BIT
;
		LDA #$08
		STA BITCOUNT
;
WAITTOCN	JSR INPORT
		BEQ WAITTOCN	; LOOP UNTIL '1'
		JSR READDELAY
		JSR INPORT
		BEQ PROCESS0	; IF '0' THEN ZERO, ELSE ONE
;
PROCESS1	JSR INPORT
		BNE PROCESS1	;LOOP UNTIL '0'
		SEC
		BCS ROTATEIN
PROCESS0	CLC
;
ROTATEIN	ROL FORMBYTE	; ROTATE CARRY
		DEC BITCOUNT 
		BNE WAITTOCN 
		LDA FORMBYTE
		JSR CKSUMADD	; UPDATE CHECKSUM
		LDA FORMBYTE 
		RTS
;
;
;INPUT FROM TAPE
;
INPORT		LDA CPORT
		AND #%00000100	; MASK OUT ALL BUT BIT 2 
		RTS
;
;
;
; UPDATE CHEKSUM COUNTERS
;
CKSUMADD	CLC
		CLD
		ADC CHECKSUM+$0	; ADD R(A) TO CKSUM LO
		STA CHECKSUM+$0
		LDA #$0
		ADC CHECKSUM+$1	; ADD 0 TO CKSUM HI 
		STA CHECKSUM+$1
		RTS
;
;
;
LOADENTRY	JSR CREAD
		BNE BAD
		LDA #$0		; INDICATE GOOD LOAD BY R(A)=0
B		BRK 
		NOP 
		NOP
		JMP LOADENTRY
BAD		LDA #$EE	; INDICATE BAD LOAD BY R(A)=EE
		BNE B
;
RECORDENT	JSR CWRITE
		BRK
		NOP 
		NOP
		JMP RECORDENT
;
; END OF PROGRAM
		.END
